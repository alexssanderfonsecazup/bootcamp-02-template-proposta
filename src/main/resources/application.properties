spring.application.name=propostas

#Contexto
server.servlet.context-path=/api

#Datasource
spring.datasource.url=${JDBC_LOCATION:jdbc:postgresql://localhost:5432/postgres}
spring.datasource.username=keycloak
spring.datasource.password=password
spring.datasource.platform=postgres
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect


#jpa
spring.jpa.show-sql=true
#hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=true
#Usado no job de associacao de cartao
spring.jpa.properties.hibernate.jdbc.batch_size=10
spring.jpa.properties.hibernate.jdbc.order_inserts=true
spring.jpa.properties.hibernate.jdbc.order_updates=true


## spring security resource server configuration
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:18080/auth/realms/nosso-cartao}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://localhost:18080/auth/realms/nosso-cartao/protocol/openid-connect/certs}


#Actuator
management.endpoints.web.exposure.include=info,health,prometheus
#management.endpoint.health.show-details=always
management.endpoint.metrics.tags.aplicacao= ${nome_da_aplicacao:serviço de proposta}
management.endpoint.metrics.tags.ambiente = ${ambiente:desenvolvimento}


# Schedule
periodicidade.busca-cartao:${PERIODICIDADE_BUSCA_CARTAO:60000}

#Clientes
solicitacoes.host=${ANALISE_URL:http://host.docker.internal:9999/api/solicitacao}
cartoes.host=${CARTOES_URL:http://host.docker.internal:8888/api/cartoes}

#Feign
feign.client.config.AnaliseClient.read-timeout=1000
feign.client.config.AnaliseClient.connect-timeout=1000


## Tempo expiracao querys
spring.jpa.properties.javax.persistence.query.timeout=50


# Jaeger - Habilita ou não
opentracing.jaeger.enabled=${JAEGER_ENABLED:true}

# Jaeger - Nome do serviço
opentracing.jaeger.service-name=${spring.application.name}

# Jaeger - Endereço para enviar os metadados (trace, span, etc)
opentracing.jaeger.http-sender.url=${JAEGER_ENDPOINT:http://localhost:14268/api/traces}

# Jaeger - Tipo de amostragem (probabilístico) e sua configuração (1 = 100%)
opentracing.jaeger.probabilistic-sampler.sampling-rate=${JAEGER_SAMPLER:0.5}

# Jaeger - Resolve inicializacao travada em Triggering deferred initialization of Spring Data repositories…
opentracing.spring.cloud.jdbc.enabled=false

